/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PF2eCreatureAdjuster
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
function extractSections(noteContent) {
  const regex = /(^[\s\S]*?)```statblock\n([\s\S]*?)\n```([\s\S]*)$/;
  const match = noteContent.match(regex);
  if (match && match.length > 3) {
    const beforeStatblock = match[1];
    const statblockText = match[2];
    const afterStatblock = match[3];
    return { beforeStatblock, statblockText, afterStatblock };
  } else {
    return null;
  }
}
var PF2eCreatureAdjuster = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "elite-upgrade",
      name: "Elite Monster Upgrade",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            const text = markdownView.editor.getValue();
            this.createMonster(text, true);
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "weak-downgrade",
      name: "Weak Monster Downgrade",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            const text = markdownView.editor.getValue();
            this.createMonster(text, false);
          }
          return true;
        }
      }
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async createMonster(noteContent, elite = false) {
    var _a;
    const sections = await extractSections(noteContent);
    if (sections) {
      let match = sections.statblockText.match(/name:\s*"\s*([^"]+)/);
      let name = "UNKNOWN";
      if (match) {
        name = match[1];
      } else {
        console.log("Failed to find the creature name!");
      }
      if (name.startsWith("Weak ") || name.startsWith("Elite ")) {
        new import_obsidian.Notice("Can't alter an already weak or elite creature.", 5e3);
        return;
      }
      const escapedName = name.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      const name_regex = new RegExp("(?<!\\[)" + escapedName, "g");
      let name_prepend = "Weak $&";
      let name_suffix = ", Weak";
      if (elite) {
        name_suffix = ", Elite";
        name_prepend = "Elite $&";
      }
      sections.beforeStatblock = sections.beforeStatblock.replace(name_regex, name_prepend);
      sections.statblockText = sections.statblockText.replace(name_regex, name_prepend);
      sections.afterStatblock = sections.afterStatblock.replace(name_regex, name_prepend);
      const statblock_level_regex = /(level:\s+"\w+?\s+)(-)?(\d+)/;
      match = sections.statblockText.match(statblock_level_regex);
      let level = -100;
      if (match) {
        level = parseInt(match[3], 10);
        if (match[2]) {
          level = -level;
        }
      } else {
        console.log("Failed to locate level in statblock!");
      }
      const orig_level = level;
      const hp_regex = /(hp:\s+)(\d+)/;
      match = sections.statblockText.match(hp_regex);
      let hp = -100;
      if (match) {
        hp = parseInt(match[2], 10);
      } else {
        console.log("Failed to locate hp in statblock!");
      }
      if (elite) {
        if (level <= 1) {
          hp = hp + 10;
        } else if (level <= 4) {
          hp = hp + 15;
        } else if (level <= 19) {
          hp = hp + 20;
        } else {
          hp = hp + 30;
        }
      } else {
        if (level >= 1 && level <= 2) {
          hp = hp - 10;
        } else if (level <= 5) {
          hp = hp - 15;
        } else if (level <= 20) {
          hp = hp - 20;
        } else {
          hp = hp - 30;
        }
      }
      sections.statblockText = sections.statblockText.replace(hp_regex, (match2, p1) => `${p1}${hp}`);
      const hp_desc_regex = /(name:\s+HP\n\s+desc:\s+")(\d+)/;
      sections.statblockText = sections.statblockText.replace(hp_desc_regex, (match2, p1) => `${p1}${hp}`);
      if (elite) {
        if (level < 1) {
          level = level + 2;
        } else {
          level = level + 1;
        }
      } else {
        if (level == 1) {
          level = level - 2;
        } else {
          level = level - 1;
        }
      }
      const level_regex = new RegExp("(level:\\s+)" + orig_level);
      sections.beforeStatblock = sections.beforeStatblock.replace(level_regex, (match2, p1) => `${p1}${level}`);
      const level_tag_regex = new RegExp("(pf2e/creature/level/)" + orig_level);
      sections.beforeStatblock = sections.beforeStatblock.replace(level_tag_regex, (match2, p1) => `${p1}${level}`);
      sections.statblockText = sections.statblockText.replace(statblock_level_regex, (match2, p1) => `${p1}${level}`);
      let mod = -2;
      if (elite) {
        mod = 2;
      }
      const ac_regex = /(\nac:\s+)(\d+)/;
      match = sections.statblockText.match(ac_regex);
      let ac = 0;
      if (match) {
        ac = parseInt(match[2], 10);
        ac = ac + mod;
      }
      sections.statblockText = sections.statblockText.replace(ac_regex, (match2, p1) => `${p1}${ac}`);
      const ac_desc_regex = /(name:\s+AC\n\s+desc:\s+")(\d+)/;
      sections.statblockText = sections.statblockText.replace(ac_desc_regex, (match2, p1) => `${p1}${ac}`);
      const dc_regex = /DC (\d+)/g;
      sections.statblockText = sections.statblockText.replace(dc_regex, (match2, p1) => {
        return `DC ${parseInt(p1, 10) + mod}`;
      });
      const saves_regex = /(name:\s+AC\n\s+desc:\s+"\d+[\s\S]*?;\s+__Fort__)([^;"]+)/;
      sections.statblockText = sections.statblockText.replace(
        saves_regex,
        (match2, preamble, savesSection) => {
          const updatedSavesSection = savesSection.replace(
            /(\+\d+)/g,
            (saveMatch) => {
              const value = parseInt(saveMatch, 10) + mod;
              return `+${value}`;
            }
          );
          return `${preamble}${updatedSavesSection}`;
        }
      );
      const perception_regex = /("Perception"\n\s+desc:\s+"(Perception\s+)?\+)(\d+)/;
      match = sections.statblockText.match(perception_regex);
      let perception = 0;
      if (match) {
        perception = parseInt(match[3], 10) + mod;
      }
      sections.statblockText = sections.statblockText.replace(perception_regex, (match2, p1) => `${p1}${perception}`);
      sections.statblockText = sections.statblockText.replace(
        /(skills:\s+- name: "Skills"\s+desc: ")([^"]+)/,
        (match2, preamble, skillsSection) => {
          const updatedSkillsSection = skillsSection.replace(
            /(\+\d+)/g,
            (skillMatch) => {
              const value = parseInt(skillMatch, 10) + mod;
              return `+${value}`;
            }
          );
          return `${preamble}${updatedSkillsSection}`;
        }
      );
      const attacks_section_regex = /(attacks:\n\s+- name:)([\s\S]+)$/;
      sections.statblockText = sections.statblockText.replace(
        attacks_section_regex,
        (match2, preamble, attacksSection) => {
          let updatedAttacksSection = attacksSection.replace(
            /(attack )(\+\d+)/g,
            (attack, attack_preamble, attack_value) => {
              const value = parseInt(attack_value, 10) + mod;
              if (value < 0) {
                return `attack ${value}`;
              } else {
                return `attack +${value}`;
              }
            }
          );
          updatedAttacksSection = updatedAttacksSection.replace(
            /(\s*desc: "`pf2:[^`]+` [^+]+)(\+\d+)/g,
            (attack, attack_preamble, attack_value) => {
              const value = parseInt(attack_value, 10) + mod;
              if (value < 0) {
                return `${attack_preamble}${value}`;
              } else {
                return `${attack_preamble}+${value}`;
              }
            }
          );
          updatedAttacksSection = updatedAttacksSection.replace(
            /(\s*desc: "[^\s\d\w] [^+]+)(\+\d+)/g,
            (attack, attack_preamble, attack_value) => {
              const value = parseInt(attack_value, 10) + mod;
              if (value < 0) {
                return `${attack_preamble}${value}`;
              } else {
                return `${attack_preamble}+${value}`;
              }
            }
          );
          updatedAttacksSection = updatedAttacksSection.replace(
            ///(__Damage__\s+\d+d\d+(\+\d+)?)(?:\s*\((\d+d\d+(\+\d+)?)\))?/g
            /(__Damage__\s+\d+d\d+)(\s*[\+-]?\s*)?(\d+)?(?:\s*\((\d+d\d+\s*[\+\-]?\s*\d*)?\))?/g,
            (attack, attack_preamble, attack_mod, attack_value, paren_attack) => {
              let value = 0;
              if (attack_value) {
                value = parseInt(attack_value, 10);
                if (attack_mod.includes("-")) {
                  value = -value;
                }
              }
              value = value + mod;
              if (value == 0) {
                return `${attack_preamble}`;
              } else if (value < 0) {
                value = -value;
                return `${attack_preamble} - ${value}`;
              } else {
                return `${attack_preamble} + ${value}`;
              }
            }
          );
          updatedAttacksSection = updatedAttacksSection.replace(
            /(\b\d+d\d+\b)(\s+[\+-]\s+)?(\d+)?(?=(?:\s+\w+){0,3}\s+damage)/g,
            (attack, attack_preamble, attack_mod, attack_value) => {
              let value = 0;
              if (attack_value) {
                value = parseInt(attack_value, 10);
                if (attack_mod.includes("-")) {
                  value = -value;
                }
              }
              value = value + mod;
              if (value == 0) {
                return `${attack_preamble}`;
              } else if (value < 0) {
                value = -value;
                return `${attack_preamble} - ${value}`;
              } else {
                return `${attack_preamble} + ${value}`;
              }
            }
          );
          return `${preamble}${updatedAttacksSection}`;
        }
      );
      const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      const currFile = markdownView == null ? void 0 : markdownView.file;
      const currentNoteFolderPath = (_a = currFile == null ? void 0 : currFile.parent) == null ? void 0 : _a.path;
      const newNoteFileName = name + name_suffix + ".md";
      const newNotePath = `${currentNoteFolderPath}/${newNoteFileName}`;
      const new_monster = sections.beforeStatblock + "```statblock\n" + sections.statblockText + "\n```\n" + sections.afterStatblock;
      try {
        await this.app.vault.create(newNotePath, new_monster);
        new import_obsidian.Notice(newNoteFileName + " created.", 5e3);
        this.app.workspace.openLinkText(newNoteFileName, newNotePath, true, { active: true });
      } catch (err) {
        console.error("Error creating new note:", err);
        new import_obsidian.Notice("Failed to create note: " + err, 5e3);
      }
    } else {
      console.log("The note does not contain a properly formatted statblock section.");
      new import_obsidian.Notice("The note does not contain a properly formatted statblock section.", 2e3);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
